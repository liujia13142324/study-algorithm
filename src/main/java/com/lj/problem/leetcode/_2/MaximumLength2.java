package com.lj.problem.leetcode._2;

import com.lj.study.common.bean.A;
import org.junit.Test;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

public class MaximumLength2 {

    @Test
    public void test() {
//        System.out.println(maximumLength(new int[]{1,2,3,4,5}, 2));
        System.out.println(maximumLength3(new int[]{3453664,5671529,4750684,1350029,1316661,6897818,325249,9940792,3975674,7349696,3818776,236590,7184310,5332354,7011091,7324041,5102157,9260500,7509423,7837889,2377518,8687323,5249098,7162990,842591,2710398,5299673,8589710,7478603,4522411,1968580,6831592,2950613,7950490,8707025,299066,1721417,7760817,132579,3669026,7744105,4819383,663504,1286929,7560302,3143237,5631806,1485333,2069978,3356574,899886,29577,1162224,4612393,8767754,4162451,5529873,6881310,8151068,1297795,407271,2353412,3928289,4351810,935191,6881322,347926,2088152,5676182,6261219,6310118,3109426,3882297,6925764,1628119,7490888,4061605,4380919,7718694,6236433,7646207,5981806,6900908,5255427,7151233,23908,46389,2976537,9387709,8598274,8615107,3416941,4655008,9560714,8526332,6796424,4215551,8969898,2901839,4542031,5271088,8607189,387550,7037448,593044,8568144,8215585,1935567,202783,4896949,3865918,2532956,1314739,624689,8629797,3281869,9482902,5157970,8887502,775412,2082737,2305302,1777535,6035315,6804859,5526765,2826631,3158374,9631394,6677413,9329692,4148423,3199353,9312916,191874,5461688,904338,9808646,8954694,411360,4338257,6672325,1606236,6467056,4204046,7049352,5211564,709723,9778811,3087088,2517646,2668074,3333020,9553468,6934115,9936009,8760142,6620753,913106,8941870,693937,369894,5778519,2772055,7870450,1208871,4353831,2143724,7706352,8424304,5976704,5071516,5722445,8734696,4791923,2889447,2570530,1206707,5394118,5745442,3242098,929589,7791613,5282957,8597194,8511203,2912784,5863621,7644324,5220883,8794248,1243797,1421227,2733117,3495743,3065258,3064368,3863149,8272232,7856226,8481174,6215521,2436781,7820334,2110169,98862,5464113,6153846,6056370,5162701,2300546,117199,832327,2904056,7979901,9185991,8360778,9231616,54699,1038697,7550338,6145461,4128200,9094652,4036270,8056646,2277487,6733764,368741,5104420,7608399,8385693,9081564,2801538,9664203,6027657,5555580,6467159,9347635,1864049,4986780,7777466,6586244,9143470,6110268,6411108,2233833,1738934,2430651,1065277,9350129,9885892,9361462,37116,735991,4568777,9493208,6570788,4539912,1333464,434598,6355667,7666809,9088225,7850745,9204414,4247808,459475,4467119,7402713,6153607,1927519,9698717,4617669,5774122,4057097,2751780,9196746,7329367,5101302,2874926,2461811,7661570,3727430,4845684,3476485,5888611,6620854,1893276,6076919,9829640,9325550,794896,6535770,2733145,3297638,2737939,3209757,8136005,9087054,8256313,400934,9922520,1312267,9600601,8906874,2429036,1692979,7093788,7452102,6216663,998867,3229582,3657015,6674365,9459721,221212,9048164,1038892,2267525,4625603,6660644,4200070,9441997,283099,3556857,568960,1144654,737512,168014,3988966,5193772,8389463,9400927,518161,7111059,750917,4460434,2215845,6934351,8243854,1013446,1763871,1341472,3453815,8133132,2295298,3500279,975390,812724,7941430,7632813,8861986,7341774,2982253,5050594,9051171,4353815,3482880,8930226,551929,310803,7708780,9244120,9297649,2899770,7444885,8387992,1413294,8954982,3415143,6783723,1951974,1197453,6016480,4872560,5822804,8409273,4723168,3405073,5151974,5743810,3093815,4170178,9187281,2292660,9781756,6854274,1434186,8966353,4540096,9139323,8524542,8728618,4762122,1306084,7131742,6282803,7181120,5726015,1315656,179641,5485342,4519748,8723445,1440919,8912039,5863127,3280026,2376626,9638995,6859596,9467066,5456100,8346665,8817150,7357685,55374,7058903,3552759,8451906,7828803,5072326,2535877,1180892,7754007,4979107,354875,1776864,4844212,962915,6899736,3078594,7841884,2571744,2384719,8365453,8200805,4308879,9018398,5783633,8710237,2558540,7226742,2530020,1965320,4669328,6654445,9747071,8887810,7453619,6549893,3663186,9423654,5286269,4404050,2794189,4387243,1897859,1568302,4407836,8858961,5276592,5889486,6088655,3016355,5012219,8336784,5681864,4281431,6743794,8820725,7198940,4082379,8645619,7082007,5594875,6728834,6714894,6531806,561254,3937580,477548,9794886,694274,380347,8489698,663443,5828110,7363045,2470640,6270774,1158737,9755874,9350168,3522027,7424426,346528,924367,9937978}
                , 910));
        System.out.println(maximumLength2(new int[]{3453664,5671529,4750684,1350029,1316661,6897818,325249,9940792,3975674,7349696,3818776,236590,7184310,5332354,7011091,7324041,5102157,9260500,7509423,7837889,2377518,8687323,5249098,7162990,842591,2710398,5299673,8589710,7478603,4522411,1968580,6831592,2950613,7950490,8707025,299066,1721417,7760817,132579,3669026,7744105,4819383,663504,1286929,7560302,3143237,5631806,1485333,2069978,3356574,899886,29577,1162224,4612393,8767754,4162451,5529873,6881310,8151068,1297795,407271,2353412,3928289,4351810,935191,6881322,347926,2088152,5676182,6261219,6310118,3109426,3882297,6925764,1628119,7490888,4061605,4380919,7718694,6236433,7646207,5981806,6900908,5255427,7151233,23908,46389,2976537,9387709,8598274,8615107,3416941,4655008,9560714,8526332,6796424,4215551,8969898,2901839,4542031,5271088,8607189,387550,7037448,593044,8568144,8215585,1935567,202783,4896949,3865918,2532956,1314739,624689,8629797,3281869,9482902,5157970,8887502,775412,2082737,2305302,1777535,6035315,6804859,5526765,2826631,3158374,9631394,6677413,9329692,4148423,3199353,9312916,191874,5461688,904338,9808646,8954694,411360,4338257,6672325,1606236,6467056,4204046,7049352,5211564,709723,9778811,3087088,2517646,2668074,3333020,9553468,6934115,9936009,8760142,6620753,913106,8941870,693937,369894,5778519,2772055,7870450,1208871,4353831,2143724,7706352,8424304,5976704,5071516,5722445,8734696,4791923,2889447,2570530,1206707,5394118,5745442,3242098,929589,7791613,5282957,8597194,8511203,2912784,5863621,7644324,5220883,8794248,1243797,1421227,2733117,3495743,3065258,3064368,3863149,8272232,7856226,8481174,6215521,2436781,7820334,2110169,98862,5464113,6153846,6056370,5162701,2300546,117199,832327,2904056,7979901,9185991,8360778,9231616,54699,1038697,7550338,6145461,4128200,9094652,4036270,8056646,2277487,6733764,368741,5104420,7608399,8385693,9081564,2801538,9664203,6027657,5555580,6467159,9347635,1864049,4986780,7777466,6586244,9143470,6110268,6411108,2233833,1738934,2430651,1065277,9350129,9885892,9361462,37116,735991,4568777,9493208,6570788,4539912,1333464,434598,6355667,7666809,9088225,7850745,9204414,4247808,459475,4467119,7402713,6153607,1927519,9698717,4617669,5774122,4057097,2751780,9196746,7329367,5101302,2874926,2461811,7661570,3727430,4845684,3476485,5888611,6620854,1893276,6076919,9829640,9325550,794896,6535770,2733145,3297638,2737939,3209757,8136005,9087054,8256313,400934,9922520,1312267,9600601,8906874,2429036,1692979,7093788,7452102,6216663,998867,3229582,3657015,6674365,9459721,221212,9048164,1038892,2267525,4625603,6660644,4200070,9441997,283099,3556857,568960,1144654,737512,168014,3988966,5193772,8389463,9400927,518161,7111059,750917,4460434,2215845,6934351,8243854,1013446,1763871,1341472,3453815,8133132,2295298,3500279,975390,812724,7941430,7632813,8861986,7341774,2982253,5050594,9051171,4353815,3482880,8930226,551929,310803,7708780,9244120,9297649,2899770,7444885,8387992,1413294,8954982,3415143,6783723,1951974,1197453,6016480,4872560,5822804,8409273,4723168,3405073,5151974,5743810,3093815,4170178,9187281,2292660,9781756,6854274,1434186,8966353,4540096,9139323,8524542,8728618,4762122,1306084,7131742,6282803,7181120,5726015,1315656,179641,5485342,4519748,8723445,1440919,8912039,5863127,3280026,2376626,9638995,6859596,9467066,5456100,8346665,8817150,7357685,55374,7058903,3552759,8451906,7828803,5072326,2535877,1180892,7754007,4979107,354875,1776864,4844212,962915,6899736,3078594,7841884,2571744,2384719,8365453,8200805,4308879,9018398,5783633,8710237,2558540,7226742,2530020,1965320,4669328,6654445,9747071,8887810,7453619,6549893,3663186,9423654,5286269,4404050,2794189,4387243,1897859,1568302,4407836,8858961,5276592,5889486,6088655,3016355,5012219,8336784,5681864,4281431,6743794,8820725,7198940,4082379,8645619,7082007,5594875,6728834,6714894,6531806,561254,3937580,477548,9794886,694274,380347,8489698,663443,5828110,7363045,2470640,6270774,1158737,9755874,9350168,3522027,7424426,346528,924367,9937978}
                , 910));
        System.out.println(maximumLength2(new int[]{3,8,10,7,6}, 2));
        System.out.println(maximumLength3(new int[]{3,8,10,7,6}, 2));
    }

    public int maximumLength3(int[] nums, int k){
        List<Integer>[][] list = new ArrayList[k][k];
        int i;
        for (i = 0; i < k; i++) {
            list[i] = new ArrayList[k];
        }
        List<Integer>[] tmpList;
        i = 0;
        int mod;
        int next;
        for (int num: nums) {
            for (i = 0; i < k; i++) {
                tmpList = list[i];
                mod = num % k;
                next = (k + i - mod) % k;

                if (tmpList[mod] == null && tmpList[next] != null) {
                    continue;
                }

                if (tmpList[mod] == null) {
                    tmpList[mod] = new ArrayList<>();
                }

                tmpList[mod].add(num);

                if (mod == next) {
                    continue;
                }

                if (tmpList[next] == null) {
                    tmpList[next] = tmpList[mod];
                }else if (tmpList[mod].size() > tmpList[next].size()){
                    tmpList[next] = tmpList[mod];
                }

                tmpList[mod] = null;
            }
        }

        int result = 0;
        for (List<Integer>[] l1: list) {
            for (List<Integer> l2: l1) {
                if (l2 == null) {continue;}
                result = Math.max(result, l2.size());
            }
        }

        return result;
    }


    public int maximumLength(int[] nums, int k) {

        List<Integer>[][] list = new ArrayList[k][k];
        int i;
        List<Integer>[] tmpList;
        for (int num: nums) {
            for (i = 0; i < k; i++) {
                tmpList = list[i];
                for (List<Integer> tmpList2: tmpList) {
                    if (tmpList2 == null) {continue;}
                    if ((tmpList2.get(tmpList2.size() - 1) + num) % k == i) {
                        tmpList2.add(num);
                    }
                }

                int tmp = num % k;
                if (tmpList[tmp] == null) {
                    tmpList[tmp] = new ArrayList<>();
                    tmpList[tmp].add(num);
                }
            }

        }

        int result = 0;

        for (List<Integer>[] l1: list) {
            for (List<Integer> l2: l1) {
                if (l2 == null) {continue;}
                result = Math.max(result, l2.size());
            }
        }

        return result;
    }


    public int maximumLength2(int[] nums, int k) {

        List<List<Integer>>[] list = new ArrayList[k];
        int i;
        List<List<Integer>> tmpList;
        for (int num: nums) {
            outer:
            for (i = 0; i < k; i++) {
                tmpList = list[i];
                if (tmpList == null) {
                    list[i] = new ArrayList<>();
                    list[i].add(new ArrayList<>());
                    list[i].get(0).add(num);
                    continue;
                }

                for (List<Integer> tmpList2: tmpList) {
                    if ((tmpList2.get(tmpList2.size() - 1) + num) % k == i) {
                        tmpList2.add(num);
                        // 这里真的可以跳过吗?
                        continue outer;
                    }
                    if (tmpList2.get(0) % k == num % k) {
                        continue outer;
                    }
                }

                List<Integer> tmp2 = new ArrayList<>();
                tmp2.add(num);
                tmpList.add(tmp2);
            }

        }

        int result = 0;

        for (List<List<Integer>> l1: list) {
            for (List<Integer> l2: l1) {
                result = Math.max(result, l2.size());
            }
        }

        return result;
    }

}
